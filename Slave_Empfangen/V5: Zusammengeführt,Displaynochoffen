//TODOS:
//BUTTON FÜR NACHTRÄGLICHE FENSTERSTATE AKTUALISIERUNG PER SCHLÜSSEL
//SCHWARZE ANZEIGE UND SCHÖNE FORMATIERUNG FÜR DISPLAY
  //-->Bilder in Weiß mit schwarzem Hintergrund
  //
//GENAUE KLARHEIT ÜBER PAGES


//Inkludierte Bibliotheken
#include "ESP32_NOW.h"
#include "WiFi.h"
#include <esp_mac.h>  // Für die MAC2STR und MACSTR Makros
#include <Adafruit_GFX.h>
#include <Adafruit_ST7789.h>
#include <SPI.h>
#include <vector>
#include <String>
#include <math.h>
#include <TFT_eSPI.h>
#include <lvgl.h>
#include <iostream>

#include "frames.h"

#define CrowPanel_24


//Channel für Kommunikation zwischen den ESP32 wird festgelegt
#define ESPNOW_WIFI_CHANNEL 6

//TFT Display bekommt erste Befehle
#define TFT_CS 5
#define TFT_RST 17
#define TFT_DC 16
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);

//Struct zum Speichern der versendeten Nachricht
typedef struct test_data{
  char message[128];
  char id[11];
 
}test_data;

//Struct zum Speichern der Dekodierten Daten
typedef struct infos{
  char data[128];
  float tanklvl;
  float longitude;
  float latitude;
  float kilometer;
  int time;
  short sunroof;
  bool rear_right;
  bool rear_left;
  bool front_left;
  bool front_right;
  bool f_left_door;
}infos;

infos data_input;
//

class ESP_NOW_Peer_Class : public ESP_NOW_Peer {
public:
  // Konstruktor der Klasse
  ESP_NOW_Peer_Class(const uint8_t *mac_addr, uint8_t channel, wifi_interface_t iface, const uint8_t *lmk) 
  : ESP_NOW_Peer(mac_addr, channel, iface, lmk) {}

  // Destruktor der Klasse
  ~ESP_NOW_Peer_Class() {}

  // Funktion, um den Master-Peer zu registrieren
  bool add_peer() {
    if (!add()) {
      log_e("Failed to register the broadcast peer");
      return false;
    }
    return true;
  }


static const uint16_t screenWidth = 240;
static const uint16_t screenHeight = 280;

const int buttonPin = 32;
int buttonState = 0;
int page = 0;


//[0] = labelPageName
//[1] = barChart
//[2] = labelRange
//[3] = containerOben
//[4] = containerUnten
//[5] = labelAvg
//[6] = labelActions
lv_obj_t *objectArray[7] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL };


TFT_eSPI tft = TFT_eSPI(); /* TFT entity */

static lv_disp_draw_buf_t draw_buf;
static lv_color_t buf1[screenWidth * screenHeight / 13];

/* display flash */
void my_disp_flush(lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p) {
  uint32_t w = (area->x2 - area->x1 + 1);
  uint32_t h = (area->y2 - area->y1 + 1);

  tft.startWrite();
  tft.setAddrWindow(area->x1, area->y1, w, h);
  tft.pushColors((uint16_t *)&color_p->full, w * h, true);
  tft.endWrite();

  lv_disp_flush_ready(disp);
}

//interrupt function von dem Button
void IRAM_ATTR handleInterrupt() {
  Serial.println("Interrupt occurred!");
}



//Alle Dekodierfunktionen
std::vector<int> rawHexToInt (String hex /*, int bitLength, int firstByte, int firstBit*/) {      //für Kilometer, Koordinaten und Date/Time, erstellt Vektor, der den Hex Zahlen Int Zahlen zuordnet und evtl. nicht genannte Hex Zahlen mit 0-Werten auffüllt
    int charCounter = 0;  //zählt übergebenen String hoch
    std::vector<int> Coefficients;
    int keySpaceCounter = 0;
    short counterPlaceValues = 0;
    bool permitEnd = 0;
    while (permitEnd == 0){       //HexStrings müssen mit \n beendet werden.
        if (hex[charCounter] == ' '){
            keySpaceCounter++;
            charCounter++;
        } else {
            if (((hex[charCounter + 1] == ' ')||(hex[charCounter + 1] == '\0')) && ((hex[charCounter - 1] == ' ')||(Coefficients.empty() == 1))){
                Coefficients.push_back(0);
            } 
            if (hex[charCounter] == '0') Coefficients.push_back(0);
            if (hex[charCounter] == '1') Coefficients.push_back(1);
            if (hex[charCounter] == '2') Coefficients.push_back(2);
            if (hex[charCounter] == '3') Coefficients.push_back(3);
            if (hex[charCounter] == '4') Coefficients.push_back(4);
            if (hex[charCounter] == '5') Coefficients.push_back(5); 
            if (hex[charCounter] == '6') Coefficients.push_back(6); 
            if (hex[charCounter] == '7') Coefficients.push_back(7);
            if (hex[charCounter] == '8') Coefficients.push_back(8);
            if (hex[charCounter] == '9') Coefficients.push_back(9);
            if (hex[charCounter] == 'A') Coefficients.push_back(10);
            if (hex[charCounter] == 'B') Coefficients.push_back(11);
            if (hex[charCounter] == 'C') Coefficients.push_back(12); 
            if (hex[charCounter] == 'D') Coefficients.push_back(13); 
            if (hex[charCounter] == 'E') Coefficients.push_back(14); 
            if (hex[charCounter] == 'F') Coefficients.push_back(15);
            charCounter++;
        }
        if (hex[charCounter] == '\0') {
            
            permitEnd = 1;
        }
    }
    return Coefficients;
}


int rawHexToBinaries(String hex, short firstBit, short lastBit) {       //benötigt math.h Library
   String binaries = "";
   int number = 0;
    for (char c : hex) {
        switch (c) {
            case '0': binaries += "0000"; break;
            case '1': binaries += "0001"; break;
            case '2': binaries += "0010"; break;
            case '3': binaries += "0011"; break;
            case '4': binaries += "0100"; break;
            case '5': binaries += "0101"; break;
            case '6': binaries += "0110"; break;
            case '7': binaries += "0111"; break;
            case '8': binaries += "1000"; break;
            case '9': binaries += "1001"; break;
            case 'A': binaries += "1010"; break;
            case 'B': binaries += "1011"; break;
            case 'C': binaries += "1100"; break;
            case 'D': binaries += "1101"; break;
            case 'E': binaries += "1110"; break;
            case 'F': binaries += "1111"; break;
        }
    }
    int coefficientValue = 1 << (lastBit-firstBit);
    
    for (int i = firstBit; i <= lastBit; ++i) {
        if (binaries[i] == '1') {
            number += coefficientValue;
        
        }
        coefficientValue /= 2;
    }
    return number;
}
bool windowsState(String hex){    //(type für Fenster L, R, l, r (Klein = hinten, groß = vorne))
    bool windowsState= true;          //Konvertieren von int in short
    int number = rawHexToBinaries(hex, 12, 13);
    if(number==2){
      windowsState = 0; //wenn number 2 dann zu sonst immer offen
    }
    return windowsState;
}
short sunroofState(String hex){
    short sunroofState= 1;         //Dach komplett offen 
    int number = rawHexToBinaries(hex, 32, 39);   //Konvertieren von int in short
    if(number < 100){
      sunroofState = 2;           //Dach in lifting position
    }else if(number == 100){
      sunroofState = 0;           //Dach zu
    }
    return sunroofState;
}
bool doorState(String hex){
    int number = (rawHexToBinaries(hex, 6, 7))-1;
    bool doorState = number;
    return doorState;
}

float tankLvl(const String& hex) {
    float tankLvl = rawHexToBinaries(hex, 40, 50);
    if(tankLvl >= 800){
      tankLvl = (data_input.tanklvl*10);
    }
    return tankLvl / 10;

}
int coordinates(char type, bool isLongitude, String hex) {//wenn latitude == 1 --> Nach Breitengrad wird gesucht, sonst nach geograph. Länge //type: 'd' -> Degrees, 'm' -> Minutes, 's' -> Seconds, 'a' -> mas, 'b' -> all (nur Latitude oder nur Longitude)
    std::vector<int> rawCoefficients = rawHexToInt(hex);
    float result = 0;
    bool isNegative = 0;
    int coefficientValue = 1;
    const int offset = 8;
    for (int hexCounter = (0 + isLongitude*offset); hexCounter < (8 + offset); hexCounter++){
        result += rawCoefficients[hexCounter + 1]*coefficientValue; 
        coefficientValue *= 16;
        result += rawCoefficients[hexCounter]*coefficientValue; 
        coefficientValue *= 16;
        hexCounter++;
    }
    //Nun ist das Ergebnis bereit.
    result-=(1073741824*(1+isLongitude));
    /*if (type = 'b'){
      int raw = result;
      return raw;
    }*/
    result*=(90/1073741823.5);
    
    if (result < 0){
        isNegative = 1;
        result *= (-1);
    }
    int degrees = floor(result);
    if(type == 'd'){
        return degrees;
    } else {
        result -= degrees;
        result *=60;
        int minutes = floor(result);
        if(type == 'm'){
            return minutes;
        } else {
            result -= minutes;
            result *=60;
            int seconds = floor(result);
            if(type == 's'){
                return seconds;
            } else {
                result -= seconds;
                result *=1000;
                int mas = floor(result);
                if(type == 'a'){
                    return mas;
                } else {/*          //Man bekommt keinen String, sondern nur einzeln Int-Werte von Grad, Minuten, Sekunden und Mas
                   String resul String = "";
                    resul String += to String(degrees);
                    resul String += "° ";
                    resul String += to String(minutes);
                    resul String += "' ";
                    resul String += to String(degrees);
                    resul String += ".";
                    resul String += to String(degrees);
                    resul String += "'' ";
                    if(isNegative == 1){
                        if(offset == 0){
                            resul String += "S";
                        } else {
                            resul String += "W";
                        }
                    }else{
                        if(offset == 0){
                            resul String += "N";
                        } else {
                            resul String += "E";
                        }
                    }*/
                }
            }
        }
    }
}
float kilometers (String hex){
    std::vector<int> kilometers = rawHexToInt(hex);
    int coefficientValue = 1;
    float result = 0;
    for (int hexCounter = 0; hexCounter < 6; hexCounter++){
        result += kilometers[hexCounter + 1]*coefficientValue; 
        coefficientValue *= 16;
        result += kilometers[hexCounter]*coefficientValue; 
        coefficientValue *= 16;
        hexCounter++;
    }
    result /= 10;
    return result;
}

int uhr(char type, String hexString){                      //für Stunden , Minuten, Sekunden, Tag, Monat, Jahr müssen die chars 'h', 'm', 's', 'D', 'M' und 'Y' angegeben werden
    std::vector<int> rawCoefficients = rawHexToInt(hexString);
    
    float result = 0;
    if (type == 'h') {
        result += rawCoefficients[1]; 
        result += rawCoefficients[0]*16; 
    }
    if (type == 'm') {
        result += rawCoefficients[3]; 
        result += rawCoefficients[2]*16; 
    }
    if (type == 's') {
        result += rawCoefficients[5]; 
        result += rawCoefficients[4]*16; 
    }
    if (type == 'D') {
        result += rawCoefficients[7]; 
        result += rawCoefficients[6]*16;

    }
    if (type == 'M') {
        result += rawCoefficients[9]; 
        result += rawCoefficients[8]*16; 
    }
    if (type == 'Y') {
        result += rawCoefficients[11]; 
        result += rawCoefficients[10]*16; 
        result += rawCoefficients[12]*100;
        result += rawCoefficients[13]*1000;
    }
    return result;
}
void decode(const char array[11], const char array2[128]) {
    char code[4];
    strncpy(code, array, 3);
    code[3] = '\0';
    if (strcmp(code, "42E") == 0) {
        data_input.tanklvl = tankLvl(array2);
    }
    else if(strcmp(code, "3EB")==0){
        data_input.longitude= coordinates('d', 1 , array2 );
        data_input.latitude= coordinates('d', 0 , array2 );
    }
    else if(strcmp(code,"309")==0){
      data_input.kilometer = kilometers(array2);
    }
    else if(strcmp(code,"30B")==0){
      data_input.time = uhr('m',array2);
    }
    else if(strcmp(code, "35D")==0){
      data_input.sunroof = sunroofState(array2);
    }
    else if(strcmp(code, "32E")==0){
      data_input.rear_right = windowsState(array2);
    }
    else if(strcmp(code, "31A")==0){
      data_input.front_left = windowsState(array2);
    }
    else if(strcmp(code, "320")==0){
      data_input.front_right = windowsState(array2);
    }
    else if(strcmp(code, "328")==0){
      data_input.rear_left = windowsState(array2);
    }
    else if(strcmp(code, "2FB")==0){
      data_input.f_left_door = doorState(array2);
    }
    //Kein DEBUGGING für No Match Found
}

  // Funktion, um die empfangenen Nachrichten vom Master zu drucken
  void onReceive(const uint8_t *data, size_t len, bool broadcast) {
    if (len == sizeof(test_data)) {   //Überprüfen ob Daten der größe des Structs test_data entsprechen
      test_data received_data;
      infos data_input;
      //Daten werden in test_data Struct einsortiert
      memcpy(&received_data, data, sizeof(test_data));
      decode(received_data.id, received_data.message);                                  //Dekodierung wird durchgeführt
 } 
    else {
      // Bildschirm löschen
      tft.fillScreen(ST77XX_BLACK); 
      tft.setCursor(10, 10);
      //Fehlernachricht wird ausgegeben
      tft.printf("Unexpected data length received\n");
     // Serial.println("Unexpected data length received");
    }
  }};


// Liste aller Master. Diese wird beim Registrieren eines neuen Masters gefüllt.
std::vector<ESP_NOW_Peer_Class> masters;

// Callback, das aufgerufen wird, wenn ein unbekannter Peer eine Nachricht sendet
void register_new_master(const esp_now_recv_info_t *info, const uint8_t *data, int len, void *arg) {
  if (memcmp(info->des_addr, ESP_NOW.BROADCAST_ADDR, 6) == 0) {
    //Serial.printf("Unknown peer " MACSTR " sent a broadcast message\n", MAC2STR(info->src_addr));
    //Serial.println("Registering the peer as a master");

    ESP_NOW_Peer_Class new_master(info->src_addr, ESPNOW_WIFI_CHANNEL, WIFI_IF_STA, NULL);

    masters.push_back(new_master);
    if (!masters.back().add_peer()) {
      Serial.println("Failed to register the new master");
      return;
    }
  } else {
    // Der Slave empfängt nur Broadcast-Nachrichten
    log_v("Received a unicast message from " MACSTR, MAC2STR(info->src_addr));
    log_v("Ignoriere die Nachricht");
  }
}
//////////////////////////////////////////////////////////////////////////////////////////////////////Display/////////////////////////////////////////////////////////////////
// was immer angezeigt wird
void stdOverlay(int page) {

  lv_obj_t *containerOben = lv_obj_create(lv_scr_act());
  lv_obj_set_size(containerOben, 250, 30);
  lv_obj_align(containerOben, LV_ALIGN_TOP_MID, 0, -5);
  lv_obj_set_style_bg_color(containerOben, lv_color_hex(0x0000ff), LV_PART_MAIN);  // Set background color to red
  lv_obj_set_style_bg_opa(containerOben, LV_OPA_COVER, LV_PART_MAIN);              // Make sure the background is fully opaque

  objectArray[3] = containerOben;
  // Label Oben 1 in Container Oben
  lv_obj_t *labelO1 = lv_label_create(containerOben);
  lv_label_set_text(labelO1, "CLS 450 4 Matic");
  lv_obj_center(labelO1);

  const int containerUntenBreite = 150;
  // container mit Punkten unten
  lv_obj_t *containerUnten = lv_obj_create(lv_scr_act());
  lv_obj_set_size(containerUnten, containerUntenBreite, 20);
  lv_obj_align(containerUnten, LV_ALIGN_BOTTOM_MID, 0, 0);
  lv_obj_set_style_radius(containerUnten, 10, LV_PART_MAIN);
  lv_obj_set_style_bg_color(containerUnten, lv_color_hex(0x909090), LV_PART_MAIN);  // Set background color to red
  lv_obj_set_style_bg_opa(containerUnten, LV_OPA_COVER, LV_PART_MAIN);              // Make sure the background is fully opaque

  objectArray[4] = containerUnten;

  const int numPoint = 7;
  const int sizePoint = 10;
  const int sizeSpace = (containerUntenBreite - 25 * (numPoint - 1) - 10) / 2;
  // Label in container unten
  for (int i = 0; i < numPoint; i++) {
    lv_obj_t *point = lv_btn_create(containerUnten);  // Punkt als Button erstellen
    lv_obj_set_size(point, 10, 10);
    lv_obj_align(point, LV_ALIGN_LEFT_MID, 10 + i * 15, 0);
    lv_obj_set_style_radius(point, 10 / 2, LV_PART_MAIN);
    if (i == page) {
      lv_obj_set_style_bg_color(point, lv_color_hex(0x000000), LV_PART_MAIN);
    } else {
      lv_obj_set_style_bg_color(point, lv_color_white(), LV_PART_MAIN);
    }
    lv_obj_set_style_bg_opa(point, LV_OPA_COVER, LV_PART_MAIN);
  }
}

void createPageName() {
  objectArray[0] = lv_label_create(lv_scr_act());
  lv_obj_set_style_transform_angle(objectArray[0], 900, LV_PART_MAIN);
  lv_obj_align(objectArray[0], LV_ALIGN_LEFT_MID, 20, 0);
  lv_obj_set_style_text_color(objectArray[0], lv_color_hex(0x0000ff), LV_PART_MAIN);
  lv_label_set_text(objectArray[0], "Seite 2");
}


void pageName(const char *seitenName) {
  lv_label_set_text(objectArray[0], seitenName);
}

lv_obj_t *barChart(int fuellstand) {
  lv_obj_t *bar = lv_bar_create(lv_scr_act());  // Create a bar object on the active screen
  lv_obj_set_size(bar, 150, 20);                // Set the size of the bar (width, height)
  lv_obj_align(bar, LV_ALIGN_CENTER, 0, 80);    // Align the bar to the center of the screen

  lv_bar_set_value(bar, fuellstand, LV_ANIM_OFF);
  return bar;
}

void clearBitmap(int sizeX, int sizeY, int posX, int posY) {
  for (int i = 0; i < sizeY; i++) {
    for (int j = 0; j < sizeX; j++) {
      tft.drawPixel(j + posX, i + posY, 0xFFFF);
    }
  }
}

void tuerenAnpassen() {
  int vorneLinks = 0;
  int vorneRechts = 0;
}
void pageHome() {
  //  drawGrayscaleBitmap(30,100,home_car,180,90);
  pageName("Home");
}

void pageOne() {
  clearBitmap(180, 90, 30, 100);
  drawGrayscaleBitmap(74, 63, tank, 114, 133);
  objectArray[1] = barChart(data_input.tanklvl);
  pageName("Seite 1");
}


void pageTwo() {
  clearBitmap(114, 133, 74, 63);
  lv_obj_del(objectArray[1]);
  objectArray[1] = NULL;
  pageName("Seite 2");
  lv_timer_handler();
  delay(5);
  drawGrayscaleBitmap(40, 50, range, 60, 60);
  drawGrayscaleBitmap(40, 150, avg, 60, 60);

  //style für label
  static lv_style_t style;
  lv_style_init(&style);
  lv_style_set_text_font(&style, &lv_font_montserrat_20);  // Set the font to Montserrat 28

  // Apply the style to the label
  //label
  lv_obj_t *labelRange = lv_label_create(lv_scr_act());
  objectArray[2] = labelRange;
  lv_obj_align(labelRange, LV_ALIGN_TOP_LEFT, 110, 70);
  lv_obj_set_style_text_color(labelRange, lv_color_hex(0x000000), LV_PART_MAIN);
  lv_label_set_text(labelRange, "hier Range");

  lv_obj_t *labelAvg = lv_label_create(lv_scr_act());
  objectArray[5] = labelAvg;
  lv_obj_align(labelAvg, LV_ALIGN_TOP_LEFT, 110, 170);
  lv_obj_set_style_text_color(labelAvg, lv_color_hex(0x000000), LV_PART_MAIN);
  lv_label_set_text(labelAvg, "hier avg");

  lv_obj_add_style(labelRange, &style, LV_PART_MAIN);
  lv_obj_add_style(labelAvg, &style, LV_PART_MAIN);
}

void pageThree() {
  clearBitmap(60, 60, 40, 50);
  clearBitmap(60, 60, 40, 150);
  if (objectArray[2] != NULL) {
    lv_obj_del(objectArray[2]);
    objectArray[2] = NULL;
    lv_obj_del(objectArray[5]);
    objectArray[5] = NULL;
  }
  //GPS Position vom Fahrzeug anzeigen
  


  //GPS Distanz berechnen
  float gps_latitude_car = coordinates(b, 0, hex); 
  gps_latitude_car*=(90/1073741823.5);
      
  float gps_longitude_car = coordinates(b, 1, hex);
  gps_longitude_car*=(90/1073741823.5);

  float gps_latitude_key = 

  float gps_longitude_key =
  
  double a = pow(sin(fabsf(gps_latitude_key - gps_latitude_car)/2),2) + cos(gps_latitude_key)*cos(gps_latitude_car)*pow(sin(fabsf(gps_latitude_key - gps_latitude_car)/2),2);
  double c = 2*atan2(sqrt(a), sqrt(1 - a));

  float distanceMeters = 6371000*c;   //Ca Meter Radius (eig ist Erde Ellipse)
  //Haversine Formel:
  

  



  lv_timer_handler();
  pageName("Seite 3");
  drawGrayscaleBitmap(60, 40, car_close, 124, 208);
  draw8BitRGBBitmap(100, 100, vorneLinks, 20, 53);
}

void pageFour() {
  clearBitmap(124, 208, 60, 40);
  pageName("Meldungen");
  if(data_input.rear_right == 0){Rechtes Fenster hinten ist offen};
  if(data_input.rear_left == 0){Linkes Fenster hinten ist offen};
  if(data_input.front_left == 0){Linkes Fenster hinten ist offen};
  if(data_input.front_right == 0){Rechtes Fenster hinten ist offen};
  //switch sunroof:
  switch (data_input.sunroof):
  case 0: tft.break;

  case 2: break;

  default: break;
}


void pageDriversLog() {
  pageName("Fahrtbuch");
  lv_obj_del(objectArray[6]);
  objectArray[6] = NULL;

  static lv_style_t style_cont;
  lv_style_init(&style_cont);
  lv_style_set_border_color(&style_cont, lv_color_hex(0x0000ff));  // Setzt die Umrandungsfarbe auf Rot
  lv_style_set_border_width(&style_cont, 2);                       // Setzt die Breite der Umrandung auf 3 Pixel

  static lv_style_t style_mainCont;
  lv_style_init(&style_mainCont);
  lv_style_set_border_color(&style_mainCont, lv_color_hex(0xffffff));  // Setzt die Umrandungsfarbe auf Rot
  lv_style_set_border_width(&style_mainCont, 0);                       // Setzt die Breite der Umrandung auf 3 Pixel

  lv_obj_t *main_cont = lv_obj_create(lv_scr_act());
  lv_obj_set_size(main_cont, 210, 240);                // Größe anpassen
  lv_obj_add_style(main_cont, &style_mainCont, 0);     // Stil anwenden
  lv_obj_align(main_cont, LV_ALIGN_TOP_LEFT, 25, 35);
  lv_obj_clear_flag(main_cont, LV_OBJ_FLAG_SCROLLABLE);  // Positionierung innerhalb des nutzbaren Bereichs

  // Erster Container
  lv_obj_t *cont1 = lv_obj_create(main_cont);
  lv_obj_set_size(cont1, 200, 110);         // Breite und Höhe anpassen
  lv_obj_add_style(cont1, &style_cont, 0);  // Stil anwenden
  lv_obj_align(cont1, LV_ALIGN_TOP_MID, 0, -13);

  // Labels für Container 1
  lv_obj_t *label1 = lv_label_create(cont1);
  lv_label_set_text(label1, "Fahrtnr: 1\nStartUhrzeit: 08:00\nEndUhrzeit: 10:00\nkm: 25\nTankfuellstand: 75%");
  lv_obj_align(label1, LV_ALIGN_CENTER, 0, 0);

  // Zweiter Container
  lv_obj_t *cont2 = lv_obj_create(main_cont);
  lv_obj_set_size(cont2, 200, 110);         // Breite und Höhe anpassen
  lv_obj_add_style(cont2, &style_cont, 0);  // Stil anwenden
  lv_obj_align(cont2, LV_ALIGN_BOTTOM_MID, 0, -9);

  // Labels für Container 2
  lv_obj_t *label2 = lv_label_create(cont2);
  lv_label_set_text(label2, "Fahrtnr: 2\nStartUhrzeit: 12:00\nEndUhrzeit: 14:00\nkm: 50\nTankfuellstand: 60%");
  lv_obj_align(label2, LV_ALIGN_CENTER, 0, 0);

}

void showPage(int page) {
  lv_obj_del(objectArray[3]);
  objectArray[3] = NULL;
  lv_obj_del(objectArray[4]);
  objectArray[4] = NULL;
  stdOverlay(page);
  if (page == 0) {
    pageHome();
  } else if (page == 1) {
    pageOne();
  } else if (page == 2) {
    pageTwo();
  } else if (page == 3) {
    pageThree();
  } else if (page == 4) {
    pageFour();
  } else if (page == 5) {
    pageDriversLog();
  } 
  lv_timer_handler();
}


void drawGrayscaleBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h) {
  for (int16_t j = 0; j < h; j++) {
    for (int16_t i = 0; i < w; i++) {
      uint8_t gray = bitmap[j * w + i];
      uint16_t color = grayToRGB565(gray);
      tft.drawPixel(x + i, y + j, color);
    }
  }
}

// Function to convert 8-bit grayscale to 16-bit RGB565
uint16_t grayToRGB565(uint8_t gray) {
  uint8_t r = gray;
  uint8_t g = gray;
  uint8_t b = gray;
  return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}

void draw8BitRGBBitmap(int16_t x, int16_t y, const uint8_t *bitmap, int16_t w, int16_t h) {
  for (int16_t j = 0; j < h; j++) {
    for (int16_t i = 0; i < w; i++) {
      uint8_t rgb = bitmap[j * w + i];
      uint16_t color = rgb332ToRGB565(rgb);
      tft.drawPixel(x + i, y + j, color);
    }
  }
}

uint16_t rgb332ToRGB565(uint8_t rgb332) {
  // Extract the 3-3-2 bit components from the 8-bit RGB332 value
  uint8_t r = (rgb332 >> 5) & 0x07;  // Red component (3 bits)
  uint8_t g = (rgb332 >> 2) & 0x07;  // Green component (3 bits)
  uint8_t b = rgb332 & 0x03;         // Blue component (2 bits)

  // Convert 3-bit red to 5-bit red for RGB565
  uint16_t r5 = (r * 255 / 7) >> 3;  // Scale 3-bit red to 5 bits
  // Convert 3-bit green to 6-bit green for RGB565
  uint16_t g6 = (g * 255 / 7) >> 2;  // Scale 3-bit green to 6 bits
  // Convert 2-bit blue to 5-bit blue for RGB565
  uint16_t b5 = (b * 255 / 3) >> 3;  // Scale 2-bit blue to 5 bits

  // Combine the components into a 16-bit RGB565 value
  return (r5 << 11) | (g6 << 5) | b5;
}

void setup() {
  //Inits für WIFI, ESP Master Register,... ///////////////////////////////////
  Serial.begin(115200); /*ESP32 init */

  while (!Serial) {
    delay(10);
  }

  // Initialisiere das Wi-Fi-Modul
  WiFi.mode(WIFI_STA);
  WiFi.setChannel(ESPNOW_WIFI_CHANNEL);
  while (!WiFi.STA.started()) {
    delay(100);
  }

  // Initialisiere das ESP-NOW-Protokoll
  if (!ESP_NOW.begin()) {
    Serial.println("Failed to initialize ESP-NOW");
    Serial.println("Rebooting in 5 seconds...");
    delay(5000);
    ESP.restart();
  }

  // Registriere das neue Peer-Callback
  ESP_NOW.onNewPeer(register_new_master, NULL);

  Serial.println("Setup complete. Waiting for a master to broadcast a message...");
  tft.printf("Waiting for Master...");


  //Inits für Display und lv/////////////////////////////////////////
  pinMode(buttonPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(buttonPin), handleInterrupt, RISING);

  
  tft.begin();
  tft.setRotation(0);
  tft.fillScreen(TFT_BLACK);
  delay(100);

  //lvgl init
  lv_init();

  lv_disp_draw_buf_init(&draw_buf, buf1, NULL, screenWidth * screenHeight / 13);

  /* Initialize the display */
  static lv_disp_drv_t disp_drv;
  lv_disp_drv_init(&disp_drv);
  /* Change the following line to your display resolution */
  disp_drv.hor_res = screenWidth;
  disp_drv.ver_res = screenHeight;
  disp_drv.flush_cb = my_disp_flush;
  disp_drv.draw_buf = &draw_buf;
  lv_disp_drv_register(&disp_drv);

  /* Initialize the (dummy) input device driver */
  static lv_indev_drv_t indev_drv;
  lv_indev_drv_init(&indev_drv);
  indev_drv.type = LV_INDEV_TYPE_POINTER;
  lv_indev_drv_register(&indev_drv);

  tft.fillScreen(TFT_BLACK);

  drawGrayscaleBitmap(0, 0, stern, 240, 280);
  stdOverlay(0);

  //overlay();
  createPageName();

  pageHome();

  lv_timer_handler();
  lv_obj_clear_flag(lv_scr_act(), LV_OBJ_FLAG_SCROLLABLE);

  Serial.println("Setup done");
}


void loop() {
  /*tft.fillScreen(ST77XX_BLACK); 
  tft.setCursor(10, 10);
  tft.printf("Tanklevel=  %.1f\n", data_input.tanklvl);
  tft.printf("Longitude: %.1f\t Latitude: %.1f\n", data_input.longitude, data_input.latitude);
  tft.printf("Gefahrene Kilometer: %.1f\n", data_input.kilometer);
  tft.printf("Uhrzeit: %d", data_input.time);
  tft.printf("Sunroof: %d\n", data_input.sunroof);
  tft.printf("Window rear right: %d\n", data_input.rear_right);
  tft.printf("Window rear left: %d\n", data_input.rear_left);
  tft.printf("Window front right: %d\n", data_input.front_right);
  tft.printf("Window front left: %d \n", data_input.front_left);
  tft.printf("%d; %d; %d; %d; %d; %d \n", data_input.f_left_door, data_input.f_right_door, data_input.r_left_door, data_input.r_right_door, data_input.trunk_lid, data_input.gas_door);
  */
  
  buttonState = digitalRead(buttonPin);
  
  //If Abfragen zum Erkennen einer Fahrt
  before = now;
  now = 0;
  if(data_input.kilometers != 0){
    now = 1;
  } 
  if(before == 0 && now == 1){
    SAVEBEGINNINGDATAFORLOG;
  }
  if(before == 1 && now == 0){
    SAVEENDINGDATAFORLOG;
    if(before.kilometer != now.kilometer){
      AKTUALISIEREDATALOG;
      }
  }
  
  if (buttonState == LOW) {
    delay(300);
    if (buttonState == LOW) {
      if (page >= 6) {
        page = 0;
      } else {
        page += 1;
      }
      showPage(page);
    }
  }
  lv_timer_handler();
  delay(10);
}
