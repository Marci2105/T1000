/*
    ESP-NOW Broadcast Master
    Lucas Saavedra Vaz - 2024

    This sketch demonstrates how to broadcast messages to all devices within the ESP-NOW network.
    This example is intended to be used with the ESP-NOW Broadcast Slave example.

    The master device will broadcast a message every 5 seconds to all devices within the network.
    This will be done using by registering a peer object with the broadcast address.

    The slave devices will receive the broadcasted messages and print them to the Serial Monitor.
*/

#include "ESP32_NOW.h"
#include "WiFi.h"

#include <esp_mac.h>  // For the MAC2STR and MACSTR macros
#include <mcp_can.h>
#include <SPI.h>


#include <iostream>
#include <vector>
#include <string>

long unsigned int rxId;
unsigned char len = 0;
unsigned char rxBuf[8];
char msgString[128];  // Array zur Speicherung des seriellen Strings

#define CAN0_INT 4        // Set INT auf GPIO 4 (Interrupt-Pin)
MCP_CAN CAN0(5);          // Set CS auf GPIO 5 (Chip Select Pin)

/* Definitions */

#define ESPNOW_WIFI_CHANNEL 6

/* Classes */

// Creating a new class that inherits from the ESP_NOW_Peer class is required.

typedef struct test_data{
  char message[128];
  char id[11];
}test_data;


class ESP_NOW_Broadcast_Peer : public ESP_NOW_Peer {
public:
  // Constructor of the class using the broadcast address
  ESP_NOW_Broadcast_Peer(uint8_t channel, wifi_interface_t iface, const uint8_t *lmk) : ESP_NOW_Peer(ESP_NOW.BROADCAST_ADDR, channel, iface, lmk) {}

  // Destructor of the class
  ~ESP_NOW_Broadcast_Peer() {
    remove();
  }

  // Function to properly initialize the ESP-NOW and register the broadcast peer
  bool begin() {
    if (!ESP_NOW.begin() || !add()) {
      log_e("Failed to initialize ESP-NOW or register the broadcast peer");
      return false;
    }
    return true;
  }

  // Function to send a message to all devices within the network
  bool send_message(const uint8_t *data, size_t len) {
    if (!send(data, len)) {
      log_e("Failed to broadcast message");
      return false;
    }
    return true;
  }
};

/* Global Variables */

uint32_t msg_count = 0;

// Create a broadcast peer object
ESP_NOW_Broadcast_Peer broadcast_peer(ESPNOW_WIFI_CHANNEL, WIFI_IF_STA, NULL);

/* Main */

string tankLvl (string hex) {      //für Tank 
    int keySpaceCounter = 0; //für
    int charCounter = 0;  //zählt übergebenen String hoch
    string binaries = "";
    bool permitEnd = 0;
    while (permitEnd == 0){       //HexStrings müssen mit \n beendet werden.
        if (hex[charCounter] == ' '){
            keySpaceCounter++;
            charCounter++;
        } else {
            if (((hex[charCounter + 1] == ' ')||(hex[charCounter + 1] == '\0')) && (hex[charCounter - 1] == ' ')){
                binaries += "0000";
            } 
            if (hex[charCounter] == '0') binaries += "0000";
            if (hex[charCounter] == '1') binaries += "0001";
            if (hex[charCounter] == '2') binaries += "0010";
            if (hex[charCounter] == '3') binaries += "0011";
            if (hex[charCounter] == '4') binaries += "0100";
            if (hex[charCounter] == '5') binaries += "0101";
            if (hex[charCounter] == '6') binaries += "0110";
            if (hex[charCounter] == '7') binaries += "0111";
            if (hex[charCounter] == '8') binaries += "1000";
            if (hex[charCounter] == '9') binaries += "1001";
            if (hex[charCounter] == 'A') binaries += "1010";
            if (hex[charCounter] == 'B') binaries += "1011";
            if (hex[charCounter] == 'C') binaries += "1100";
            if (hex[charCounter] == 'D') binaries += "1101";
            if (hex[charCounter] == 'E') binaries += "1110";
            if (hex[charCounter] == 'F') binaries += "1111";
            charCounter++;
        }
        if (hex[charCounter] == '\0') {
                permitEnd = 1;
            }
    }
    cout << binaries << endl;
    int coefficientValue = 1024;
    float tankLvl = 0;
    const short offset = 40;
    for (int i = 0; i < 11; i++){       //11: Bitlänge für Tankinhalt
        cout << binaries[offset+i] << endl;
        if(binaries[offset+i]=='1'){
            tankLvl += coefficientValue;
            cout << tankLvl << endl;
        }
        
        coefficientValue/=2;

    }
    
    cout << tankLvl << endl;
    tankLvl /= 10;
    string tankLevel = to_string(tankLvl);
    return tankLevel;     //Wenn tankLvl == 204.7 --> Fehler liegt vor, Daten sind nicht verfügbar laut Diagnoseportal
}

void setup() {
  Serial.begin(115200);
  while (!Serial) {
    delay(10);
  }

  // Initialize the Wi-Fi module
  WiFi.mode(WIFI_STA);
  WiFi.setChannel(ESPNOW_WIFI_CHANNEL);
  while (!WiFi.STA.started()) {
    delay(100);
  }


  Serial.println("ESP-NOW Example - Broadcast Master");
  Serial.println("Wi-Fi parameters:");
  Serial.println("  Mode: STA");
  Serial.println("  MAC Address: " + WiFi.macAddress());
  Serial.printf("  Channel: %d\n", ESPNOW_WIFI_CHANNEL);

  // Register the broadcast peer
  if (!broadcast_peer.begin()) {
    Serial.println("Failed to initialize broadcast peer");
    Serial.println("Reebooting in 5 seconds...");
    delay(5000);
    ESP.restart();
  }
  
  // Initialisiere MCP2515 bei 8MHz mit einer Baudrate von 250kb/s
  if(CAN0.begin(MCP_ANY, CAN_250KBPS, MCP_8MHZ) == CAN_OK) {
    Serial.println("MCP2515 Erfolgreich Initialisiert!");
  } else {
    Serial.println("Fehler bei der Initialisierung des MCP2515...");
  }
  
  CAN0.setMode(MCP_NORMAL);  //A Setze den Betriebsmodus auf "normal", damit der MCP2515 ACKs sendet

  pinMode(CAN0_INT, INPUT);  // Konfiguriere den Interrupt-Pin als Eingang
  
  Serial.println("MCP2515 Bibliothek Empfangsbeispiel...");
  Serial.println("Setup complete. Broadcasting messages every 5 seconds.");
}

void loop() {
  // Broadcast a message to all devices within the network
  test_data test;

 if (!digitalRead(CAN0_INT)) {  // Wenn der CAN0_INT-Pin niedrig ist, lese den Empfangspuffer aus
    CAN0.readMsgBuf(&rxId, &len, rxBuf);  // Lese Daten: len = Datenlänge, buf = Datenbyte(s)
    
    if ((rxId & 0x80000000) == 0x80000000)  // Bestimme, ob die ID Standard (11 Bit) oder erweitert (29 Bit) ist
      sprintf(msgString, "Erweiterte ID: %.8lX  DLC: %1d  Daten:", (rxId & 0x1FFFFFFF), len);
    else
      sprintf(msgString, "Standard ID: %.3lX       DLC: %1d  Daten:", rxId, len);
  
    Serial.print(msgString);
  
    if ((rxId & 0x40000000) == 0x40000000) {  // Bestimme, ob die Nachricht ein Remote Request Frame ist
      sprintf(msgString, " REMOTE REQUEST FRAME");
      Serial.print(msgString);
    } else {
      for (byte i = 0; i < len; i++) {
        sprintf(msgString, " %.2X", rxBuf[i]);
        Serial.print(msgString);
      }
    }
        
    Serial.println();
  }

   if (rxId == 0x42E) {
      snprintf(test.id, sizeof(test.id), "%.3lX", rxId);

      char messageBuffer[128];
      snprintf(messageBuffer, sizeof(messageBuffer), "Data: ");
      for (byte i = 0; i < len; i++) {
        snprintf(messageBuffer + strlen(messageBuffer), sizeof(messageBuffer) - strlen(messageBuffer), " %.2X", rxBuf[i]);
      }
      snprintf(test.message, sizeof(test.message), "%s", messageBuffer);

      test.message = tankLvl(test.message);
      Serial.printf(test.message);

      Serial.printf("Broadcasting ID: %s, Data: %s\n", test.id, test.message);

      if (!broadcast_peer.send_message((uint8_t *)&test, sizeof(test))) {
        Serial.println("Failed to broadcast message");
  }
  }
  
}
